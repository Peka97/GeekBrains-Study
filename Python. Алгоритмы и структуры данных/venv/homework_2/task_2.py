"""
Задание 2.	Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def natural_numbers(number: int = None, result: list = None) -> str:
    # Шаг рекурсии
    if not number:
        number = int(input("Введите число: "))
        return natural_numbers(number, [0, 0])
    else:
        # Базовый случай
        if number < 10:
            if number % 10 % 2 == 0:
                result[0] = result[0] + 1
            else:
                result[1] = result[1] + 1
            return f'Количество четных и нечетных цифр в числе равно: {result}'
        else:
            # Шаг рекурсии
            if number % 10 % 2 == 0:
                result[0] = result[0] + 1
            else:
                result[1] = result[1] + 1
            number //= 10
            return natural_numbers(number, result)


if __name__ == '__main__':
    print(natural_numbers())

