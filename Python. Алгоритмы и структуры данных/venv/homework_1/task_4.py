"""
Задание 4.
Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.
Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.
Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def auth_user_1(user_login: str, user_password: str) -> bool:
    """Функция для прохождения аутентификации пользователя. В случае неудачи сообщит об необходимых действиях
    Сложность: O(n)"""

    is_login, is_password = False, False            # O(1)
    for data_login, data_other in data.items():     # O(n)
        if user_login == data_login:                # O(1)
            is_login = True                         # O(1)
            if user_password == data_other[0]:      # O(1)
                is_password = True                  # O(1)
                if data_other[1]:                   # O(1)
                    return True                     # O(1)
    print('Вы не допущены к ресурсу')               # O(1)
    if is_login is False and is_password is False:  # O(1)
        print('Пользователь не найден')             # O(1)
    elif is_password is False:                      # O(1)
        print('Не верный пароль')                   # O(1)
    else:                                           # O(1)
        print('Пройдите активацию аккаунта')        # O(1)
    return False                                    # O(1)


def auth_user_2(user_login: str, user_password: str) -> bool:
    """Функция для прохождения аутентификации пользователя. В случае неудачи сообщит об необходимых действиях
    Сложность: O(1)"""

    is_login, is_password = False, False              # O(1)
    if data.get(user_login):                          # O(1)
        is_login = True                               # O(1)
        if user_password == data.get(user_login)[0]:  # O(1)
            is_password = True                        # O(1)
            if data.get(user_login)[1]:               # O(1)
                return True                           # O(1)
    print('Вы не допущены к ресурсу')                 # O(1)
    if is_login is False and is_password is False:    # O(1)
        print('Пользователь не найден')               # O(1)
    elif is_password is False:                        # O(1)
        print('Не верный пароль')                     # O(1)
    else:                                             # O(1)
        print('Пройдите активацию аккаунта')          # O(1)
    return False                                      # O(1)


data = {
    'user1': ['1232141241', True],
    'user2': ['43242fsdf23423', False],
    'user3': ['213lk2j14k32kl', False],
}

print(auth_user_1('user1', '1232141241'))  # Верный логин и пароль
print(auth_user_1('user2', '1232141241'))  # Не верный пароль
print(auth_user_1('user4', '1232141241'))  # Нет пользователя в базе
print(auth_user_1('user2', '43242fsdf23423'))  # Нет активации в базе

print()  # Сепаратор

print(auth_user_2('user1', '1232141241'))  # Верный логин и пароль
print(auth_user_2('user2', '1232141241'))  # Не верный пароль
print(auth_user_2('user4', '1232141241'))  # Нет пользователя в базе
print(auth_user_2('user2', '43242fsdf23423'))  # Нет активации в базе


# Вывод:
#  - Явным фаворитом по сложности вышла функция auth_user_2
#  - По читаемости примерно одинаковые
#  - По компакности одинаковые
