"""
Задание 3.
Для этой задачи
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""


def find_top_3_1(collection: dict) -> list:
    """Функция для нахождения топ 3 компаний по прибыли.
    Сложность: O(n**2)"""

    result = list()                            # O(n)
    max_name, max_val = str(), 0               # O(1)
    collection = collection.copy()             # O(1)
    while len(result) < 3:                     # O(3)
        for name, val in collection.items():   # O(n)
            if val > max_val:                  # O(1)
                max_name, max_val = name, val  # O(1)
        result.append((max_name, max_val))     # O(1)
        collection.pop(max_name)               # O(1)
        max_name, max_val = str(), 0           # O(1)
    return result                              # O(1)


def find_top_3_2(collection: dict) -> list:
    """Функция для нахождения топ 3 компаний по прибыли.
    Сложность: O(n log n)"""

    result = list()                                               # O(n)
    top_3_values = sorted(collection.values(), reverse=True)[:3]  # O(n log n)
    for name, val in dct.items():                                 # O(n)
        if len(result) < 3 and val in top_3_values:               # O(1)
            result.append((name, val))                            # O(1)
            top_3_values.remove(val)                              # O(1)
    return result                                                 # O(1)


# Создадим тестовый словарь с данными
dct = {
    'Яндекс': 100000000,
    'Mail': 500000,
    'Google': 150000000,
    'Sony': 120000000,
    'Valve': 130000000,
}

# Проверим нашу функцию
print(*find_top_3_1(dct))
print(*find_top_3_2(dct))  # Результат выдает не отсортированный, но об этом в задаче и не написано. Топ 3 есть топ 3.

# Вывод:
#  - Сложность функции find_top_3_2 меньше, следовательно работает быстрее;
#  - По читаемости, в целом, не уступает;
#  - Компактнее за счёт меньшего объявления переменных;
