"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.

ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для третьего скрипта
"""
from memory_profiler import memory_usage


def usage(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func()
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return mem_diff
    return wrapper


def calc(sigh=None, number_1=None, number_2=None, result=None) -> str | None:
    """
    Задание 1.	Написать программу, которая будет складывать, вычитать,
    умножать или делить два числа. Числа и знак операции вводятся пользователем.
    После выполнения вычисления программа не должна завершаться, а должна
    запрашивать новые данные для вычислений. Завершение программы должно
    выполняться при вводе символа '0' в качестве знака операции. Если пользователь
    вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
    сообщать ему об ошибке и снова запрашивать знак операции.
    Также сообщать пользователю о невозможности деления на ноль,
    если он ввел 0 в качестве делителя.
    Подсказка:
    Вариант исполнения:
    - условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
    - условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
    Решите через рекурсию. В задании нельзя применять циклы.
    Пример:
    Введите операцию (+, -, *, / или 0 для выхода): +
    Введите первое число: 214
    Введите второе число: 234
    Ваш результат 448
    Введите операцию (+, -, *, / или 0 для выхода): -
    Введите первое число: вп
    Вы вместо трехзначного числа ввели строку (((. Исправьтесь
    Введите операцию (+, -, *, / или 0 для выхода):
    """
    # Шаг рекурсии
    if sigh is None:
        if result:
            return f"Ваш результат: {result}"
        sigh = input("Введите операцию (+, -, *, / или 0 для выхода): ")
        return calc(sigh)
        # Базовый случай
    elif sigh == '0':
        return None
    elif sigh not in ['+', '-', '*', '/']:
        print('Ошибка ввода. Повторите запрос')
        return calc()
    else:
        if number_1 is None:
            number_1 = input('Введите первое число: ')
            # Шаг рекурсии
            if number_1.isdigit():
                return calc(sigh, number_1)
            else:
                print('Ошибка ввода. Повторите запрос')
                return calc()
        elif number_2 is None:
            number_2 = input('Введите второе число: ')
            # Шаг рекурсии
            if number_2.isdigit() and (sigh != '/' or number_2 != '0'):
                return calc(sigh, number_1, number_2)
            else:
                print('Ошибка ввода. Повторите запрос')
                return calc()
        else:
            result = eval(f'{number_1}{sigh}{number_2}')
            return calc(result=result)


def calc_2():
    sigh, number_1, number_2 = '', 0, 0
    while True:
        sigh = input("Введите операцию (+, -, *, / или 0 для выхода): ")
        if sigh == '0':
            break
        if sigh in '+-*/':
            number_1 = input('Введите первое число: ')
            if number_1.isdigit():
                number_2 = input('Введите второе число: ')
                if number_2.isdigit():
                    return f'{eval(f"{number_1}{sigh}{number_2}")}'


if __name__ == '__main__':


    mem_diff = calc()
    print(f"Выполнение заняло {mem_diff} Mib")

    mem_diff = calc_2()
    print(f"Выполнение заняло {mem_diff} Mib")

    """
    При выполнении функций mem_diff в обоих случаях был 20 Mib при условии, что функции print были заменены на return
    для фиксации результата, отличного от None.
    Из курса мы знаем, что цикл работает экономичнее рекурсии, следовательно оптимизация прошла успешно.
    """
