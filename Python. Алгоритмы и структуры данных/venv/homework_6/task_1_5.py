"""
Задание 1.
Вам нужно взять 5 любых скриптов, написанных ВАМИ в рамках работы над ДЗ
курсов Алгоритмы и Основы Python
На каждый скрипт нужно два решения - исходное и оптимизированное.
Вы берете исходное, пишете что это за задание и с какого оно курса.
Далее выполняете профилирование скрипта средствами memory_profiler
Вы оптимизируете исходное решение.
Далее выполняете профилирование скрипта средствами memory_profiler
Вам нужно написать аналитику, что вы сделали для оптимизации памяти и
чего добились.

ВНИМАНИЕ:
1) скрипты для оптимизации нужно брать только из сделанных вами ДЗ
курсов Алгоритмы и Основы
2) нельзя дублировать, коды, показанные на уроке
3) для каждого из 5 скриптов у вас отдельный файл, в нем должна быть версия до
и версия после оптимизации
4) желательно выбрать те скрипты, где есть что оптимизировать и не брать те,
где с памятью и так все в порядке
5) не нужно писать преподавателю '''я не могу найти что оптимизировать''', это
отговорки. Примеров оптимизации мы перечислили много: переход с массивов на
генераторы, numpy, использование слотов, применение del, сериализация и т.д.
Это файл для пятого скрипта
"""
from memory_profiler import memory_usage


class QueueClass:
    def __init__(self):
        self.elems = []

    def push_in(self, el):
        self.elems.insert(0, el)

    def pop_out(self):
        return self.elems.pop()

    def all_out(self):
        self.elems.reverse()
        return self.elems


def usage(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(*args)
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return mem_diff
    return wrapper

@usage
def reverse_number(number: int = None) -> str:
    """
    Задание 3.	Сформировать из введенного числа
    обратное по порядку входящих в него
    цифр и вывести на экран. Например, если введено число 3486,
    то надо вывести число 6843.
    Подсказка:
    На каждом шаге вам нужно 'доставать' из числа очередную цифру
    Пока все числа не извлечены рекурсивные вызовы продолжаем
    Условие завершения рекурсии - все цифры извлечены
    Используем операции % //. Операции взятия по индексу применять нельзя.
    Решите через рекурсию. В задании нельзя применять циклы.
    Пример:
    Введите число, которое требуется перевернуть: 123
    Перевернутое число: 321
    Не забудьте проверить на числе, которое оканчивается на 0.
    1230 -> 0321
    """

    q = QueueClass()
    if not number:
        number = int(input('Введите число, которое требуется перевернуть: '))
        return reverse_number(number)
    elif number > 10:
        q.push_in(number % 10)
        number //= 10
        return reverse_number(number)
    elif number < 10:
        q.push_in(number % 10)
        return ''.join(map(str, q.all_out()))

@usage
def reverse_number_2():
    number = input('Введите число, которое требуется перевернуть: ')[::-1]
    return number

if __name__ == '__main__':
    print(reverse_number())  # -> 0.01171875
    print(reverse_number_2())  # -> 0.01171875


    """
    В данном случае, уйдя от очереди и рекурсии оптимизировали нашу функцию
    """

